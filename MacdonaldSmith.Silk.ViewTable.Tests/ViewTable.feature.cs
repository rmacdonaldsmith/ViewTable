// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MacdonaldSmith.Silk.ViewTable.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ViewTable")]
    public partial class ViewTableFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        #line 1 "ViewTable.feature"
        #line hidden
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ViewTable", "In order to aggregate data for use in a UI grid\nAs a lazy developer\nI want to be able to build a view table to aggregate data of various data types from various sources", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update")]
        public virtual void Update()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "ColumnName",
                        "DataType",
                        "Value"});
            table1.AddRow(new string[]
                {
                        "Name",
                        "string",
                        "Robert"});
            table1.AddRow(new string[]
                {
                        "Number of Records",
                        "Int32",
                        "12"});
            table1.AddRow(new string[]
                {
                        "DoB",
                        "DateTime",
                        "03/05/1973"});
#line 7
 testRunner.Given("I have a table with the following initial state", ((string)(null)), table1);
#line 12
 testRunner.When("I update the column \"Name\" with the value \"John\"");
#line 13
 testRunner.And("I commit the changes");
#line 14
 testRunner.Then("I receive an event with the changes");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Row")]
        public virtual void AddRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Row", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "ColumnName",
                        "DataType",
                        "Value"});
            table2.AddRow(new string[]
                {
                        "Name",
                        "string",
                        "Robert"});
            table2.AddRow(new string[]
                {
                        "Number of Records",
                        "Int32",
                        "12"});
            table2.AddRow(new string[]
                {
                        "DoB",
                        "DateTime",
                        "03/05/1973"});
#line 17
 testRunner.Given("I have a table with the following initial state", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "David",
                        "45",
                        "06/09/1987"});
#line 22
 testRunner.When("I add a new row with the following values", ((string)(null)), table3);
#line 24
 testRunner.And("I commit the changes");
#line 25
 testRunner.Then("I receive an event with the new row");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Column")]
        public virtual void AddColumn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Column", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "ColumnName",
                        "DataType",
                        "Value"});
            table4.AddRow(new string[]
                {
                        "Name",
                        "string",
                        "Robert"});
            table4.AddRow(new string[]
                {
                        "Number of Records",
                        "Int32",
                        "12"});
            table4.AddRow(new string[]
                {
                        "DoB",
                        "DateTime",
                        "03/05/1973"});
#line 28
 testRunner.Given("I have a table with the following initial state", ((string)(null)), table4);
#line 33
 testRunner.When("I add a \"string\" column with the name \"Surname\"");
#line 34
 testRunner.Then("the table schema will change to reflect the new \"string\" column called \"Surname\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete Row")]
        public virtual void DeleteRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Row", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[]
                {
                        "ColumnName",
                        "DataType",
                        "Value"});
            table5.AddRow(new string[]
                {
                        "Name",
                        "string",
                        "Robert"});
            table5.AddRow(new string[]
                {
                        "Number of Records",
                        "Int32",
                        "12"});
            table5.AddRow(new string[]
                {
                        "DoB",
                        "DateTime",
                        "03/05/1973"});
#line 37
 testRunner.Given("I have a table with the following initial state", ((string)(null)), table5);
#line 42
 testRunner.When("I delete a row");
#line 43
 testRunner.And("I commit the changes");
#line 44
 testRunner.Then("I receive an event indicating the row has been deleted");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
